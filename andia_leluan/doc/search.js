window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyrat", "modulename": "pyrat", "kind": "module", "doc": "<p>This file allows easier import of the PyRat library.\nIt defines all the classes and functions that can be imported from the library.</p>\n"}, {"fullname": "pyrat.src", "modulename": "pyrat.src", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyrat.src.BigHolesRandomMaze", "modulename": "pyrat.src.BigHolesRandomMaze", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.BigHolesRandomMaze.BigHolesRandomMaze", "modulename": "pyrat.src.BigHolesRandomMaze", "qualname": "BigHolesRandomMaze", "kind": "class", "doc": "<p>This class inherits from the RandomMaze class.\nTherefore, it has the attributes and methods defined in the RandomMaze class in addition to the ones defined below.</p>\n\n<p>With this maze, holes have a larger probability to appear if they are close to another hole.\nThe maze is created by removing random cells from a full maze, and making sure the maze remains connected.</p>\n", "bases": "pyrat.src.RandomMaze.RandomMaze"}, {"fullname": "pyrat.src.BigHolesRandomMaze.BigHolesRandomMaze.__init__", "modulename": "pyrat.src.BigHolesRandomMaze", "qualname": "BigHolesRandomMaze.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>args:   Arguments to pass to the parent constructor.</li>\n  <li>kwargs: Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.FixedPlayer", "modulename": "pyrat.src.FixedPlayer", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.FixedPlayer.FixedPlayer", "modulename": "pyrat.src.FixedPlayer", "qualname": "FixedPlayer", "kind": "class", "doc": "<p>This player follows a predetermined list of actions.\nThis is useful to save and replay a game.</p>\n", "bases": "pyrat.src.Player.Player"}, {"fullname": "pyrat.src.FixedPlayer.FixedPlayer.__init__", "modulename": "pyrat.src.FixedPlayer", "qualname": "FixedPlayer.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:    Reference to the current object.</li>\n  <li>actions: List of actions to perform.</li>\n  <li>args:    Arguments to pass to the parent constructor.</li>\n  <li>kwargs:  Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">actions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.FixedPlayer.FixedPlayer.turn", "modulename": "pyrat.src.FixedPlayer", "qualname": "FixedPlayer.turn", "kind": "function", "doc": "<p>This method redefines the abstract method of the parent class.\nIt is called at each turn of the game.\nIt returns the next action to perform.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Game", "modulename": "pyrat.src.Game", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.Game.Game", "modulename": "pyrat.src.Game", "qualname": "Game", "kind": "class", "doc": "<p>A game is a class that allows to play a game of PyRat.\nIt is initialized with the parameters of the game.\nPlayers should then be added to the game using the add_player method.\nFinally, the start method should be called to start the game.\nOnce the game is over, it will provide statistics about the game.\nSet your own parameters to define interesting objectives for the players.</p>\n"}, {"fullname": "pyrat.src.Game.Game.__init__", "modulename": "pyrat.src.Game", "qualname": "Game.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nAssertions checked in the objects manipulated by the game are not checked again.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:                  Reference to the current object.</li>\n  <li>random_seed:           Global random seed for all elements, set to None for a random value.</li>\n  <li>random_seed_maze:      Random seed for the maze generation, set to None for a random value.</li>\n  <li>random_seed_cheese:    Random seed for the pieces of cheese distribution, set to None for a random value.</li>\n  <li>random_seed_players:   Random seed for the initial location of players, set to None for a random value.</li>\n  <li>maze_width:            Width of the maze in number of cells.</li>\n  <li>maze_height:           Height of the maze in number of cells.</li>\n  <li>cell_percentage:       Percentage of cells that can be accessed in the maze, 0%% being a useless maze, and 100%% being a full rectangular maze.</li>\n  <li>wall_percentage:       Percentage of walls in the maze, 0%% being an empty maze, and 100%% being the maximum number of walls that keep the maze connected.</li>\n  <li>mud_percentage:        Percentage of pairs of adjacent cells that are separated by mud in the maze.</li>\n  <li>mud_range:             Interval of turns needed to cross mud.</li>\n  <li>fixed_maze:            Fixed maze in any PyRat accepted representation (dictionary, numpy.ndarray or torch.tensor).</li>\n  <li>random_maze_algorithm: Algorithm to generate the maze.</li>\n  <li>nb_cheese:             Number of pieces of cheese in the maze.</li>\n  <li>fixed_cheese:          Fixed list of cheese.</li>\n  <li>render_mode:           Method to display the game.</li>\n  <li>render_simplified:     If the maze is rendered, hides some elements that are not essential.</li>\n  <li>gui_speed:             When rendering as GUI, controls the speed of the game (GUI rendering only).</li>\n  <li>trace_length:          Maximum length of the trace to display when players are moving (GUI rendering only).</li>\n  <li>fullscreen:            Renders the game in fullscreen mode (GUI rendering only).</li>\n  <li>save_path:             Path where games are saved.</li>\n  <li>save_game:             Indicates if the game should be saved.</li>\n  <li>preprocessing_time:    Time given to the players before the game starts.</li>\n  <li>turn_time:             Time after which players will miss a turn.</li>\n  <li>game_mode:             Indicates if players play concurrently, wait for each other, or if multiprocessing is disabled.</li>\n  <li>continue_on_error:     If a player crashes, continues the game anyway.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">random_seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed_maze</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed_cheese</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed_players</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">maze_width</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">maze_height</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cell_percentage</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wall_percentage</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mud_percentage</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mud_range</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_maze</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]],</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nb_cheese</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_cheese</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_maze_algorithm</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">RandomMazeAlgorithm</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">render_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">RenderMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">render_simplified</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gui_speed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">trace_length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fullscreen</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_game</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">preprocessing_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">turn_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">game_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">GameMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">continue_on_error</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_RANDOM_SEED", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_RANDOM_SEED", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_RANDOM_SEED_MAZE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_RANDOM_SEED_MAZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_RANDOM_SEED_CHEESE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_RANDOM_SEED_CHEESE", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_RANDOM_SEED_PLAYERS", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_RANDOM_SEED_PLAYERS", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_MAZE_WIDTH", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_MAZE_WIDTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "15"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_MAZE_HEIGHT", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_MAZE_HEIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "13"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_CELL_PERCENTAGE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_CELL_PERCENTAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "80.0"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_WALL_PERCENTAGE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_WALL_PERCENTAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "60.0"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_MUD_PERCENTAGE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_MUD_PERCENTAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "20.0"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_MUD_RANGE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_MUD_RANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "(4, 9)"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_FIXED_MAZE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_FIXED_MAZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_RANDOM_MAZE_ALGORITHM", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_RANDOM_MAZE_ALGORITHM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RandomMazeAlgorithm.BIG_HOLES: &#x27;big_holes&#x27;&gt;"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_NB_CHEESE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_NB_CHEESE", "kind": "variable", "doc": "<p></p>\n", "default_value": "21"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_FIXED_CHEESE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_FIXED_CHEESE", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_RENDER_MODE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_RENDER_MODE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RenderMode.GUI: &#x27;gui&#x27;&gt;"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_RENDER_SIMPLIFIED", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_RENDER_SIMPLIFIED", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_GUI_SPEED", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_GUI_SPEED", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.0"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_TRACE_LENGTH", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_TRACE_LENGTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_FULLSCREEN", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_FULLSCREEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_SAVE_PATH", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_SAVE_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.&#x27;"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_SAVE_GAME", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_SAVE_GAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_PREPROCESSING_TIME", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_PREPROCESSING_TIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "3.0"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_TURN_TIME", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_TURN_TIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.1"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_GAME_MODE", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_GAME_MODE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GameMode.STANDARD: &#x27;standard&#x27;&gt;"}, {"fullname": "pyrat.src.Game.Game.DEFAULT_CONTINUE_ON_ERROR", "modulename": "pyrat.src.Game", "qualname": "Game.DEFAULT_CONTINUE_ON_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "pyrat.src.Game.Game.maze", "modulename": "pyrat.src.Game", "qualname": "Game.maze", "kind": "variable", "doc": "<p>Getter for __maze.\nIt returns a copy of the maze attribute.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>maze_copy: Copy of the __maze attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": pyrat.src.Maze.Maze"}, {"fullname": "pyrat.src.Game.Game.add_player", "modulename": "pyrat.src.Game", "qualname": "Game.add_player", "kind": "function", "doc": "<p>Adds a player to the game.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:     Reference to the current object.</li>\n  <li>player:   Player to add.</li>\n  <li>team:     Team of the player.</li>\n  <li>location: Controls initial location of the player (fixed index, or value of the StartingLocation enumeration).</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">player</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"o\">.</span><span class=\"n\">Player</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">StartingLocation</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">StartingLocation</span><span class=\"o\">.</span><span class=\"n\">CENTER</span><span class=\"p\">:</span> <span class=\"s1\">&#39;center&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Game.Game.reset", "modulename": "pyrat.src.Game", "qualname": "Game.reset", "kind": "function", "doc": "<p>Resets the game to its initial state.\nIf random seeds were set, they will be kept, otherwise they will be randomly generated using the configuration provided when the game was created.\nIf asked, it will keep players and will insert them as they were added.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">keep_players</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Game.Game.start", "modulename": "pyrat.src.Game", "qualname": "Game.start", "kind": "function", "doc": "<p>Starts a game, asking players for decisions until the game is over.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>stats: Game statistics computed during the game.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.GameState", "modulename": "pyrat.src.GameState", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.GameState.GameState", "modulename": "pyrat.src.GameState", "qualname": "GameState", "kind": "class", "doc": "<p>A game state is a snapshot of the game at a given time.\nIt gives an overview of scores, locations, available cheese, who is currently crossing mud, etc.\nIt also provides a few useful functions to determine who is currently leading, etc.</p>\n"}, {"fullname": "pyrat.src.GameState.GameState.__init__", "modulename": "pyrat.src.GameState", "qualname": "GameState.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pyrat.src.GameState.GameState.player_locations", "modulename": "pyrat.src.GameState", "qualname": "GameState.player_locations", "kind": "variable", "doc": "<p>Getter for __player_locations.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self.__player_locations: The __player_locations attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": Dict[str, numbers.Integral]"}, {"fullname": "pyrat.src.GameState.GameState.score_per_player", "modulename": "pyrat.src.GameState", "qualname": "GameState.score_per_player", "kind": "variable", "doc": "<p>Getter for __score_per_player.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self.__score_per_player: The __score_per_player attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": Dict[str, numbers.Number]"}, {"fullname": "pyrat.src.GameState.GameState.muds", "modulename": "pyrat.src.GameState", "qualname": "GameState.muds", "kind": "variable", "doc": "<p>Getter for __muds.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self.__muds: The __muds attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": Dict[str, Dict[str, Optional[numbers.Integral]]]"}, {"fullname": "pyrat.src.GameState.GameState.teams", "modulename": "pyrat.src.GameState", "qualname": "GameState.teams", "kind": "variable", "doc": "<p>Getter for __teams.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self.__teams: The __teams attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": Dict[str, List[str]]"}, {"fullname": "pyrat.src.GameState.GameState.cheese", "modulename": "pyrat.src.GameState", "qualname": "GameState.cheese", "kind": "variable", "doc": "<p>Getter for __cheese.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self.__cheese: The __cheese attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": List[numbers.Integral]"}, {"fullname": "pyrat.src.GameState.GameState.turn", "modulename": "pyrat.src.GameState", "qualname": "GameState.turn", "kind": "variable", "doc": "<p>Getter for __turn.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self.__turn: The __turn attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": numbers.Integral"}, {"fullname": "pyrat.src.GameState.GameState.is_in_mud", "modulename": "pyrat.src.GameState", "qualname": "GameState.is_in_mud", "kind": "function", "doc": "<p>This method returns whether a player is currently crossing mud.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  <li>name: Name of the player.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>in_mud: Whether the player is currently crossing mud.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.GameState.GameState.get_score_per_team", "modulename": "pyrat.src.GameState", "qualname": "GameState.get_score_per_team", "kind": "function", "doc": "<p>Returns the score per team.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>score_per_team: Dictionary of scores.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.GameState.GameState.game_over", "modulename": "pyrat.src.GameState", "qualname": "GameState.game_over", "kind": "function", "doc": "<p>This function checks if the game is over.\nThe game is over when there is no more cheese or when no team can catch up anymore.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>is_over: Boolean indicating if the game is over.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph", "modulename": "pyrat.src.Graph", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.Graph.Graph", "modulename": "pyrat.src.Graph", "qualname": "Graph", "kind": "class", "doc": "<p>A graph is a mathematical structure that models pairwise relations between objects.\nIt is implemented using an adjacency dictionary.\nWe assume that all vertices are hashable.\nThe keys of the dictionary are the vertices of the graph.\nThe values of the dictionary are dictionaries themselves.\nThe keys of these dictionaries are the neighbors of the corresponding vertex.\nThe values of these dictionaries are the weights of the corresponding edges.\nIt should be manipulated using the methods defined below and not directly.</p>\n"}, {"fullname": "pyrat.src.Graph.Graph.__init__", "modulename": "pyrat.src.Graph", "qualname": "Graph.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pyrat.src.Graph.Graph.vertices", "modulename": "pyrat.src.Graph", "qualname": "Graph.vertices", "kind": "variable", "doc": "<p>Returns the list of vertices in the graph.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>vertices: List of vertices in the graph.</li>\n  </ul>\n</blockquote>\n", "annotation": ": List[Hashable]"}, {"fullname": "pyrat.src.Graph.Graph.nb_vertices", "modulename": "pyrat.src.Graph", "qualname": "Graph.nb_vertices", "kind": "variable", "doc": "<p>Returns the number of vertices in the graph.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>nb_vertices: Number of vertices in the graph.</li>\n  </ul>\n</blockquote>\n", "annotation": ": numbers.Integral"}, {"fullname": "pyrat.src.Graph.Graph.edges", "modulename": "pyrat.src.Graph", "qualname": "Graph.edges", "kind": "variable", "doc": "<p>Returns the list of edges in the graph.\nSymmetric edges are counted once.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>edge_list: List of edges in the graph, as tuples (vertex_1, vertex_2).</li>\n  </ul>\n</blockquote>\n", "annotation": ": List[Tuple[Hashable, Hashable]]"}, {"fullname": "pyrat.src.Graph.Graph.nb_edges", "modulename": "pyrat.src.Graph", "qualname": "Graph.nb_edges", "kind": "variable", "doc": "<p>Returns the number of edges in the graph.\nSymmetric edges are counted once.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>nb_edges: Number of edges in the graph.</li>\n  </ul>\n</blockquote>\n", "annotation": ": numbers.Integral"}, {"fullname": "pyrat.src.Graph.Graph.add_vertex", "modulename": "pyrat.src.Graph", "qualname": "Graph.add_vertex", "kind": "function", "doc": "<p>Adds a vertex to the graph.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>vertex: Vertex to add.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">vertex</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.add_edge", "modulename": "pyrat.src.Graph", "qualname": "Graph.add_edge", "kind": "function", "doc": "<p>Adds an edge to the graph.\nBy default, it is unweighted, encoded using a weight of 1.0.\nThe edge can be directed or not.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:      Reference to the current object.</li>\n  <li>vertex_1:  First vertex.</li>\n  <li>vertex_2:  Second vertex.</li>\n  <li>weight:    Weight of the edge.</li>\n  <li>symmetric: Whether the edge is symmetric.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">vertex_1</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>,</span><span class=\"param\">\t<span class=\"n\">vertex_2</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">symmetric</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.get_neighbors", "modulename": "pyrat.src.Graph", "qualname": "Graph.get_neighbors", "kind": "function", "doc": "<p>Returns the list of neighbors of a vertex.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>vertex: Vertex of which to get neighbors.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>neighbors: List of neighbors of the vertex.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">vertex</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Hashable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.get_weight", "modulename": "pyrat.src.Graph", "qualname": "Graph.get_weight", "kind": "function", "doc": "<p>Returns the weight of an edge.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:     Reference to the current object.</li>\n  <li>vertex_1: First vertex.</li>\n  <li>vertex_2: Second vertex.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>weight: Weight of the edge.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">vertex_1</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>, </span><span class=\"param\"><span class=\"n\">vertex_2</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.as_dict", "modulename": "pyrat.src.Graph", "qualname": "Graph.as_dict", "kind": "function", "doc": "<p>Returns a dictionary representing the adjacency matrix.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>adjacency_dict: Dictionary representing the adjacency matrix.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Hashable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Hashable</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.as_numpy_ndarray", "modulename": "pyrat.src.Graph", "qualname": "Graph.as_numpy_ndarray", "kind": "function", "doc": "<p>Returns a numpy ndarray representing the graph.\nEntries are given in order of the vertices.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>adjacency_matrix: Numpy ndarray representing the adjacency matrix.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.as_torch_tensor", "modulename": "pyrat.src.Graph", "qualname": "Graph.as_torch_tensor", "kind": "function", "doc": "<p>Returns a torch tensor representing the maze.\nEntries are given in order of the vertices.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>adjacency_matrix: Torch tensor representing the adjacency matrix.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.remove_vertex", "modulename": "pyrat.src.Graph", "qualname": "Graph.remove_vertex", "kind": "function", "doc": "<p>Removes a vertex from the graph.\nAlso removes all edges connected to this vertex.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>vertex: Vertex to remove.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">vertex</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.remove_edge", "modulename": "pyrat.src.Graph", "qualname": "Graph.remove_edge", "kind": "function", "doc": "<p>Removes an edge from the graph.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:      Reference to the current object.</li>\n  <li>vertex_1:  First vertex.</li>\n  <li>vertex_2:  Second vertex.</li>\n  <li>symmetric: Also delete the symmetric edge.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">vertex_1</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>,</span><span class=\"param\">\t<span class=\"n\">vertex_2</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>,</span><span class=\"param\">\t<span class=\"n\">symmetric</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.is_connected", "modulename": "pyrat.src.Graph", "qualname": "Graph.is_connected", "kind": "function", "doc": "<p>Checks whether the graph is connected.\nUses a depth-first search.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>connected: Whether the graph is connected.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.minimum_spanning_tree", "modulename": "pyrat.src.Graph", "qualname": "Graph.minimum_spanning_tree", "kind": "function", "doc": "<p>Returns the minimum spanning tree of the graph.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  <li>random_seed: Seed for the random number generator.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>minimum_spanning_tree: Graph representing the minimum spanning tree.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">random_seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.has_edge", "modulename": "pyrat.src.Graph", "qualname": "Graph.has_edge", "kind": "function", "doc": "<p>Checks whether an edge exists between two vertices.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:     Reference to the current object.</li>\n  <li>vertex_1: First vertex.</li>\n  <li>vertex_2: Second vertex.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>edge_exists: Whether an edge exists between the two vertices.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">vertex_1</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>, </span><span class=\"param\"><span class=\"n\">vertex_2</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Graph.Graph.edge_is_symmetric", "modulename": "pyrat.src.Graph", "qualname": "Graph.edge_is_symmetric", "kind": "function", "doc": "<p>Checks whether an edge is symmetric.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:     Reference to the current object.</li>\n  <li>vertex_1: First vertex.</li>\n  <li>vertex_2: Second vertex.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>symmetric: Whether the edge is symmetric.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">vertex_1</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>, </span><span class=\"param\"><span class=\"n\">vertex_2</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.HolesOnSideRandomMaze", "modulename": "pyrat.src.HolesOnSideRandomMaze", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.HolesOnSideRandomMaze.HolesOnSideRandomMaze", "modulename": "pyrat.src.HolesOnSideRandomMaze", "qualname": "HolesOnSideRandomMaze", "kind": "class", "doc": "<p>This class inherits from the RandomMaze class.\nTherefore, it has the attributes and methods defined in the RandomMaze class in addition to the ones defined below.</p>\n\n<p>With this maze, holes are distributed on the sides of the maze.\nThe maze is created by adding cells from the center of the maze</p>\n", "bases": "pyrat.src.RandomMaze.RandomMaze"}, {"fullname": "pyrat.src.HolesOnSideRandomMaze.HolesOnSideRandomMaze.__init__", "modulename": "pyrat.src.HolesOnSideRandomMaze", "qualname": "HolesOnSideRandomMaze.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>args:   Arguments to pass to the parent constructor.</li>\n  <li>kwargs: Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.Maze", "modulename": "pyrat.src.Maze", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.Maze.Maze", "modulename": "pyrat.src.Maze", "qualname": "Maze", "kind": "class", "doc": "<p>This class inherits from the Graph class.\nTherefore, it has the attributes and methods defined in the Graph class in addition to the ones defined below.</p>\n\n<p>This class is abstract and cannot be instantiated.\nYou should use one of the subclasses to create a maze, or create your own subclass.</p>\n\n<p>A maze is a particular type of graph.\nEach vertex is a cell, indexed by a number from 0 to width*height-1.\nThere are edges between adjacent cells.\nWeights indicate the number of actions required to go from one cell to an adjacent one.\nIn this implementation, cells are placed on a grid and can only be connected along the cardinal directions.</p>\n", "bases": "pyrat.src.Graph.Graph, abc.ABC"}, {"fullname": "pyrat.src.Maze.Maze.__init__", "modulename": "pyrat.src.Maze", "qualname": "Maze.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>width:  Width of the maze, initialized to None in case it is determined afterward.</li>\n  <li>height: Height of the maze, initialized to None in case it is determined afterward.</li>\n  <li>args:   Arguments to pass to the parent constructor.</li>\n  <li>kwargs: Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.Maze.Maze.width", "modulename": "pyrat.src.Maze", "qualname": "Maze.width", "kind": "variable", "doc": "<p>Getter for _width.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self._width: The _width attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": numbers.Integral"}, {"fullname": "pyrat.src.Maze.Maze.height", "modulename": "pyrat.src.Maze", "qualname": "Maze.height", "kind": "variable", "doc": "<p>Getter for _height.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self._height: The _height attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": numbers.Integral"}, {"fullname": "pyrat.src.Maze.Maze.i_to_rc", "modulename": "pyrat.src.Maze", "qualname": "Maze.i_to_rc", "kind": "function", "doc": "<p>Transforms a maze index in a pair (row, col).\nDoes not check if the cell exists.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:  Reference to the current object.</li>\n  <li>index: Index of the cell.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>row: Row of the cell.</li>\n  <li>col: Column of the cell.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.rc_to_i", "modulename": "pyrat.src.Maze", "qualname": "Maze.rc_to_i", "kind": "function", "doc": "<p>Transforms a (row, col) pair of maze coordiates (lexicographic order) in a maze index.\nDoes not check if the cell exists.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  <li>row:  Row of the cell.</li>\n  <li>col:  Column of the cell.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>index: Corresponding cell index in the maze.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span>,</span><span class=\"param\">\t<span class=\"n\">col</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.rc_exists", "modulename": "pyrat.src.Maze", "qualname": "Maze.rc_exists", "kind": "function", "doc": "<p>Checks if a given (row, col) pair corresponds to a valid cell in the maze.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  <li>row:  Row of the cell.</li>\n  <li>col:  Column of the cell.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>exists: True if the cell exists, False otherwise.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span>, </span><span class=\"param\"><span class=\"n\">col</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.i_exists", "modulename": "pyrat.src.Maze", "qualname": "Maze.i_exists", "kind": "function", "doc": "<p>Checks if a given index pair is a valid cell in the maze.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:  Reference to the current object.</li>\n  <li>index: Index of the cell.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>exists: True if the cell exists, False otherwise.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.coords_difference", "modulename": "pyrat.src.Maze", "qualname": "Maze.coords_difference", "kind": "function", "doc": "<p>Computes the difference between the coordinates of two cells.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:     Reference to the current object.</li>\n  <li>vertex_1: First cell.</li>\n  <li>vertex_2: Second cell.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>row_diff: Difference between the rows of the cells.</li>\n  <li>col_diff: Difference between the columns of the cells.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">vertex_1</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span>,</span><span class=\"param\">\t<span class=\"n\">vertex_2</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.add_vertex", "modulename": "pyrat.src.Maze", "qualname": "Maze.add_vertex", "kind": "function", "doc": "<p>Redefines the method of the parent class.\nHere, we want vertices of a maze to be integers only.\nThis is a particular type of graph.\nWe do not duplicate asserts already made in the parent method.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>vertex: Vertex to add.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>, </span><span class=\"param\"><span class=\"n\">vertex</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.add_edge", "modulename": "pyrat.src.Maze", "qualname": "Maze.add_edge", "kind": "function", "doc": "<p>Redefines the method of the parent class.\nHere, we want edges to link only cells that are above or below.\nAlso, weights should be positive integers.\nEdges are symmetric by default.\nWe do not duplicate asserts already made in the parent method.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:     Reference to the current object.</li>\n  <li>vertex_1: First vertex.</li>\n  <li>vertex_2: Second vertex.</li>\n  <li>weight:   Weight of the edge.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">vertex_1</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span>,</span><span class=\"param\">\t<span class=\"n\">vertex_2</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.as_numpy_ndarray", "modulename": "pyrat.src.Maze", "qualname": "Maze.as_numpy_ndarray", "kind": "function", "doc": "<p>This redefines a method of the parent class.\nReturns a numpy ndarray representing the maze.\nHere, we have an entry for each cell in the maze.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>adjacency_matrix: Numpy ndarray representing the adjacency matrix.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.as_torch_tensor", "modulename": "pyrat.src.Maze", "qualname": "Maze.as_torch_tensor", "kind": "function", "doc": "<p>This redefines a method of the parent class.\nReturns a torch tensor representing the maze.\nHere, we have an entry for each cell in the maze.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>adjacency_matrix: Torch tensor representing the adjacency matrix.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.locations_to_action", "modulename": "pyrat.src.Maze", "qualname": "Maze.locations_to_action", "kind": "function", "doc": "<p>Function to transform two locations into an action to reach the target from the source.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>source: Vertex on which the player is.</li>\n  <li>target: Vertex where the character wants to go.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: Action to go from the source to the target, or None if the move is impossible.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Maze.Maze.locations_to_actions", "modulename": "pyrat.src.Maze", "qualname": "Maze.locations_to_actions", "kind": "function", "doc": "<p>Function to transform a series locations into actions.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:      Reference to the current object.</li>\n  <li>locations: List of vertices to go through.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>actions: List of actions to go from one location to the next.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">locations</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.MazeFromDict", "modulename": "pyrat.src.MazeFromDict", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.MazeFromDict.MazeFromDict", "modulename": "pyrat.src.MazeFromDict", "qualname": "MazeFromDict", "kind": "class", "doc": "<p>This class inherits from the Maze class.\nTherefore, it has the attributes and methods defined in the Maze class in addition to the ones defined below.</p>\n\n<p>This is a maze that is created from a fixed description as a dictionary, where keys are cell indices.\nAssociated values are dictionaries, where keys are neighbors of the corresponding cell, and values are the weights of the corresponding edges.\nThis class is especially useful to allow exporting a maze to a file, and then reusing it later.\nIt is also useful to test a player on a fixed maze, to compare its performance with other players.</p>\n", "bases": "pyrat.src.Maze.Maze"}, {"fullname": "pyrat.src.MazeFromDict.MazeFromDict.__init__", "modulename": "pyrat.src.MazeFromDict", "qualname": "MazeFromDict.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:        Reference to the current object.</li>\n  <li>description: Fixed maze as a dictionary.</li>\n  <li>args:        Arguments to pass to the parent constructor.</li>\n  <li>kwargs:      Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.MazeFromMatrix", "modulename": "pyrat.src.MazeFromMatrix", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.MazeFromMatrix.MazeFromMatrix", "modulename": "pyrat.src.MazeFromMatrix", "qualname": "MazeFromMatrix", "kind": "class", "doc": "<p>This class inherits from the Maze class.\nTherefore, it has the attributes and methods defined in the Maze class in addition to the ones defined below.</p>\n\n<p>This is a maze that is created from a fixed description as a numpy ndarray or a torch tensor.\nIndices of rows and columns are the indices of the corresponding cells.\nEntries are the weights of the corresponding edges.\nRows and columns with only 0 values will be ignored.\nThis class can be useful to test a player on a fixed maze, to compare its performance with other players.</p>\n", "bases": "pyrat.src.Maze.Maze"}, {"fullname": "pyrat.src.MazeFromMatrix.MazeFromMatrix.__init__", "modulename": "pyrat.src.MazeFromMatrix", "qualname": "MazeFromMatrix.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:        Reference to the current object.</li>\n  <li>description: Fixed maze as a matrix (numpy.ndarray or torch.tensor).</li>\n  <li>args:        Arguments to pass to the parent constructor.</li>\n  <li>kwargs:      Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.Player", "modulename": "pyrat.src.Player", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.Player.Player", "modulename": "pyrat.src.Player", "qualname": "Player", "kind": "class", "doc": "<p>This class is abstract and cannot be instantiated.\nYou should use one of the subclasses to create a maze, or create your own subclass.</p>\n\n<p>A player is an agent that can play a PyRat game.\nThe preprocessing method is called once at the beginning of the game.\nThe turn method is called at each turn of the game.\nThe postprocessing method is called once at the end of the game.\nOnly the turn method is mandatory.\nIf you want to keep track of some information between turns, you can define a constructor and add attributes to the object.\nCheck examples to see how to do it properly.</p>\n", "bases": "abc.ABC"}, {"fullname": "pyrat.src.Player.Player.__init__", "modulename": "pyrat.src.Player", "qualname": "Player.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  <li>name: Name of the player (if None, we take the name of the class).</li>\n  <li>skin: Skin of the player.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">skin</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">PlayerSkin</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">PlayerSkin</span><span class=\"o\">.</span><span class=\"n\">RAT</span><span class=\"p\">:</span> <span class=\"s1\">&#39;rat&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "pyrat.src.Player.Player.name", "modulename": "pyrat.src.Player", "qualname": "Player.name", "kind": "variable", "doc": "<p>Getter for __name.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self.__name: The __name attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "pyrat.src.Player.Player.skin", "modulename": "pyrat.src.Player", "qualname": "Player.skin", "kind": "variable", "doc": "<p>Getter for __skin.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>self.__skin: The __skin attribute.</li>\n  </ul>\n</blockquote>\n", "annotation": ": pyrat.src.enums.PlayerSkin"}, {"fullname": "pyrat.src.Player.Player.preprocessing", "modulename": "pyrat.src.Player", "qualname": "Player.preprocessing", "kind": "function", "doc": "<p>This method can optionally be implemented in the child classes.\nIt is called once at the beginning of the game.\nIt is typically given more time than the turn function, to perform complex computations.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Player.Player.turn", "modulename": "pyrat.src.Player", "qualname": "Player.turn", "kind": "function", "doc": "<p>This method is abstract and must be implemented in the child classes.\nIt is called at each turn of the game.\nIt returns an action to perform among the possible actions, defined in the Action enumeration.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.Player.Player.postprocessing", "modulename": "pyrat.src.Player", "qualname": "Player.postprocessing", "kind": "function", "doc": "<p>This method can optionally be implemented in the child classes.\nIt is called once at the end of the game.\nIt is not timed, and can be used to make some cleanup, analyses of the completed game, model training, etc.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  <li>stats:      Statistics about the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">stats</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.PygameRenderingEngine", "modulename": "pyrat.src.PygameRenderingEngine", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.PygameRenderingEngine.PygameRenderingEngine", "modulename": "pyrat.src.PygameRenderingEngine", "qualname": "PygameRenderingEngine", "kind": "class", "doc": "<p>This class inherits from the RenderingEngine class.\nTherefore, it has the attributes and methods defined in the RenderingEngine class in addition to the ones defined below.</p>\n\n<p>This rendering engine uses the pygame library to render the game.\nIt will create a window and display the game in it.\nThe window will run in a different process than the one running the game.</p>\n", "bases": "pyrat.src.RenderingEngine.RenderingEngine"}, {"fullname": "pyrat.src.PygameRenderingEngine.PygameRenderingEngine.__init__", "modulename": "pyrat.src.PygameRenderingEngine", "qualname": "PygameRenderingEngine.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:         Reference to the current object.</li>\n  <li>fullscreen:   Indicates if the GUI should be fullscreen.</li>\n  <li>trace_length: Length of the trace to display.</li>\n  <li>gui_speed:    Speed of the GUI.</li>\n  <li>args:         Arguments to pass to the parent constructor.</li>\n  <li>kwargs:       Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fullscreen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">trace_length</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">gui_speed</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.PygameRenderingEngine.PygameRenderingEngine.render", "modulename": "pyrat.src.PygameRenderingEngine", "qualname": "PygameRenderingEngine.render", "kind": "function", "doc": "<p>This method redefines the method of the parent class.\nThis function renders the game to a Pyame window.\nThe window is created in a different process than the one running the game.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>players:    Players of the game.</li>\n  <li>maze:       Maze of the game.</li>\n  <li>game_state: State of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.PygameRenderingEngine.PygameRenderingEngine.end", "modulename": "pyrat.src.PygameRenderingEngine", "qualname": "PygameRenderingEngine.end", "kind": "function", "doc": "<p>This method redefines the method of the parent class.\nIt waits for the window to be closed before exiting.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.RandomMaze", "modulename": "pyrat.src.RandomMaze", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.RandomMaze.RandomMaze", "modulename": "pyrat.src.RandomMaze", "qualname": "RandomMaze", "kind": "class", "doc": "<p>This class inherits from the Maze class.\nTherefore, it has the attributes and methods defined in the Maze class in addition to the ones defined below.</p>\n\n<p>This class is abstract and cannot be instantiated.\nYou should use one of the subclasses to create a maze, or create your own subclass.</p>\n\n<p>A random maze is a maze that is created randomly.\nYou can specify the size of the maze, the density of cells, walls, and mud, and the range of the mud values.\nYou can also specify a random seed to reproduce the same maze later.</p>\n", "bases": "pyrat.src.Maze.Maze, abc.ABC"}, {"fullname": "pyrat.src.RandomMaze.RandomMaze.__init__", "modulename": "pyrat.src.RandomMaze", "qualname": "RandomMaze.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:            Reference to the current object.</li>\n  <li>cell_percentage: Percentage of cells to be reachable.</li>\n  <li>wall_percentage: Percentage of walls to be present.</li>\n  <li>mud_percentage:  Percentage of mud to be present.</li>\n  <li>mud_range:       Range of the mud values (optional if mud_percentage = 0.0).</li>\n  <li>random_seed:     Random seed for the maze generation, set to None for a random value.</li>\n  <li>args:            Arguments to pass to the parent constructor.</li>\n  <li>kwargs:          Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cell_percentage</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span>,</span><span class=\"param\">\t<span class=\"n\">wall_percentage</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span>,</span><span class=\"param\">\t<span class=\"n\">mud_percentage</span><span class=\"p\">:</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span>,</span><span class=\"param\">\t<span class=\"n\">mud_range</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Integral</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.RenderingEngine", "modulename": "pyrat.src.RenderingEngine", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.RenderingEngine.RenderingEngine", "modulename": "pyrat.src.RenderingEngine", "qualname": "RenderingEngine", "kind": "class", "doc": "<p>A rendering engine is an object that can render a PyRat game.\nBy defaut, this engine renders nothing, which is a valid rendering mode for a PyRat game.\nInherit from this class to create a rendering engine that does something.</p>\n"}, {"fullname": "pyrat.src.RenderingEngine.RenderingEngine.__init__", "modulename": "pyrat.src.RenderingEngine", "qualname": "RenderingEngine.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:              Reference to the current object.</li>\n  <li>render_simplified: Whether to render the simplified version of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">render_simplified</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pyrat.src.RenderingEngine.RenderingEngine.render", "modulename": "pyrat.src.RenderingEngine", "qualname": "RenderingEngine.render", "kind": "function", "doc": "<p>This method does nothing.\nRedefine it in the child classes to render the game somehow.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>players:    PLayers of the game.</li>\n  <li>maze:       Maze of the game.</li>\n  <li>game_state: State of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.RenderingEngine.RenderingEngine.end", "modulename": "pyrat.src.RenderingEngine", "qualname": "RenderingEngine.end", "kind": "function", "doc": "<p>This method does nothing.\nRedefine it in the child classes to do something when the game ends if needed.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.ShellRenderingEngine", "modulename": "pyrat.src.ShellRenderingEngine", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.ShellRenderingEngine.ShellRenderingEngine", "modulename": "pyrat.src.ShellRenderingEngine", "qualname": "ShellRenderingEngine", "kind": "class", "doc": "<p>This class inherits from the RenderingEngine class.\nTherefore, it has the attributes and methods defined in the RenderingEngine class in addition to the ones defined below.</p>\n\n<p>An ASCII rendering engine is a rendering engine that can render a PyRat game in ASCII.\nIt also supports ANSI escape codes to colorize the rendering.</p>\n", "bases": "pyrat.src.RenderingEngine.RenderingEngine"}, {"fullname": "pyrat.src.ShellRenderingEngine.ShellRenderingEngine.__init__", "modulename": "pyrat.src.ShellRenderingEngine", "qualname": "ShellRenderingEngine.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>use_colors: Boolean indicating whether the rendering engine should use colors or not.</li>\n  <li>args:       Arguments to pass to the parent constructor.</li>\n  <li>kwargs:     Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">use_colors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.ShellRenderingEngine.ShellRenderingEngine.render", "modulename": "pyrat.src.ShellRenderingEngine", "qualname": "ShellRenderingEngine.render", "kind": "function", "doc": "<p>This method redefines the method of the parent class.\nThis function renders the game to show its current state.\nIt does so by creating a string representing the game state and printing it.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>players:    Players of the game.</li>\n  <li>maze:       Maze of the game.</li>\n  <li>game_state: State of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.UniformHolesRandomMaze", "modulename": "pyrat.src.UniformHolesRandomMaze", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.UniformHolesRandomMaze.UniformHolesRandomMaze", "modulename": "pyrat.src.UniformHolesRandomMaze", "qualname": "UniformHolesRandomMaze", "kind": "class", "doc": "<p>This class inherits from the RandomMaze class.\nTherefore, it has the attributes and methods defined in the RandomMaze class in addition to the ones defined below.</p>\n\n<p>With this maze, holes are uniformly distributed in the maze.\nThe maze is created by removing random cells from a full maze, and making sure the maze remains connected.</p>\n", "bases": "pyrat.src.RandomMaze.RandomMaze"}, {"fullname": "pyrat.src.UniformHolesRandomMaze.UniformHolesRandomMaze.__init__", "modulename": "pyrat.src.UniformHolesRandomMaze", "qualname": "UniformHolesRandomMaze.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>args:   Arguments to pass to the parent constructor.</li>\n  <li>kwargs: Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyrat.src.enums", "modulename": "pyrat.src.enums", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.enums.Action", "modulename": "pyrat.src.enums", "qualname": "Action", "kind": "class", "doc": "<p>This enumeration defines all the possible actions a player can take in a maze.</p>\n\n<h6 id=\"values\">Values:</h6>\n\n<blockquote>\n  <ul>\n  <li>NOTHING: No action.</li>\n  <li>NORTH:   Move north.</li>\n  <li>SOUTH:   Move south.</li>\n  <li>EAST:    Move east.</li>\n  <li>WEST:    Move west.</li>\n  </ul>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "pyrat.src.enums.Action.NOTHING", "modulename": "pyrat.src.enums", "qualname": "Action.NOTHING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.NOTHING: &#x27;nothing&#x27;&gt;"}, {"fullname": "pyrat.src.enums.Action.NORTH", "modulename": "pyrat.src.enums", "qualname": "Action.NORTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.NORTH: &#x27;north&#x27;&gt;"}, {"fullname": "pyrat.src.enums.Action.SOUTH", "modulename": "pyrat.src.enums", "qualname": "Action.SOUTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.SOUTH: &#x27;south&#x27;&gt;"}, {"fullname": "pyrat.src.enums.Action.EAST", "modulename": "pyrat.src.enums", "qualname": "Action.EAST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.EAST: &#x27;east&#x27;&gt;"}, {"fullname": "pyrat.src.enums.Action.WEST", "modulename": "pyrat.src.enums", "qualname": "Action.WEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.WEST: &#x27;west&#x27;&gt;"}, {"fullname": "pyrat.src.enums.RenderMode", "modulename": "pyrat.src.enums", "qualname": "RenderMode", "kind": "class", "doc": "<p>This enumeration defines all accepted rendering modes.</p>\n\n<h6 id=\"values\">Values:</h6>\n\n<blockquote>\n  <ul>\n  <li>GUI:          The game will be rendered graphically in a window.</li>\n  <li>ANSI:         The game will be rendered in the terminal using ANSI characters.</li>\n  <li>ASCII:        The game will be rendered in the terminal using ASCII characters.</li>\n  <li>NO_RENDERING: The game will not be rendered.</li>\n  </ul>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "pyrat.src.enums.RenderMode.GUI", "modulename": "pyrat.src.enums", "qualname": "RenderMode.GUI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RenderMode.GUI: &#x27;gui&#x27;&gt;"}, {"fullname": "pyrat.src.enums.RenderMode.ANSI", "modulename": "pyrat.src.enums", "qualname": "RenderMode.ANSI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RenderMode.ANSI: &#x27;ansi&#x27;&gt;"}, {"fullname": "pyrat.src.enums.RenderMode.ASCII", "modulename": "pyrat.src.enums", "qualname": "RenderMode.ASCII", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RenderMode.ASCII: &#x27;ascii&#x27;&gt;"}, {"fullname": "pyrat.src.enums.RenderMode.NO_RENDERING", "modulename": "pyrat.src.enums", "qualname": "RenderMode.NO_RENDERING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RenderMode.NO_RENDERING: &#x27;no_rendering&#x27;&gt;"}, {"fullname": "pyrat.src.enums.GameMode", "modulename": "pyrat.src.enums", "qualname": "GameMode", "kind": "class", "doc": "<p>This enumeration defines all accepted game modes.</p>\n\n<h6 id=\"values\">Values:</h6>\n\n<blockquote>\n  <ul>\n  <li>STANDARD:    Players have their own process and play simultaneously, with timeouts that can be missed.</li>\n  <li>SYNCHRONOUS: Players have their own process and play simultaneously, but actions are applied when all players are ready.</li>\n  <li>SEQUENTIAL:  All players are asked for a decision, and then actions are applied simultaneously, but there is no multiprocessing.</li>\n  <li>SIMULATION:  The game is run as fast as possible, i.e., there is no rendering, no multiprocessing, and no timeouts.</li>\n  </ul>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "pyrat.src.enums.GameMode.STANDARD", "modulename": "pyrat.src.enums", "qualname": "GameMode.STANDARD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GameMode.STANDARD: &#x27;standard&#x27;&gt;"}, {"fullname": "pyrat.src.enums.GameMode.SYNCHRONOUS", "modulename": "pyrat.src.enums", "qualname": "GameMode.SYNCHRONOUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GameMode.SYNCHRONOUS: &#x27;synchronous&#x27;&gt;"}, {"fullname": "pyrat.src.enums.GameMode.SEQUENTIAL", "modulename": "pyrat.src.enums", "qualname": "GameMode.SEQUENTIAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GameMode.SEQUENTIAL: &#x27;sequential&#x27;&gt;"}, {"fullname": "pyrat.src.enums.GameMode.SIMULATION", "modulename": "pyrat.src.enums", "qualname": "GameMode.SIMULATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GameMode.SIMULATION: &#x27;simulation&#x27;&gt;"}, {"fullname": "pyrat.src.enums.StartingLocation", "modulename": "pyrat.src.enums", "qualname": "StartingLocation", "kind": "class", "doc": "<p>This enumeration defines all named starting locations for players.\nThe player will start at the closest existing cell to the desired location.</p>\n\n<h6 id=\"values\">Values:</h6>\n\n<blockquote>\n  <ul>\n  <li>CENTER:       The player will start at the center of the maze.</li>\n  <li>TOP_LEFT:     The player will start at the top left corner of the maze.</li>\n  <li>TOP_RIGHT:    The player will start at the top right corner of the maze.</li>\n  <li>BOTTOM_LEFT:  The player will start at the bottom left corner of the maz.</li>\n  <li>BOTTOM_RIGHT: The player will start at the bottom right corner of the maze.</li>\n  <li>RANDOM:       The player will start at a random location.</li>\n  <li>SAME:         The player will start at the same location as the previously registered player.</li>\n  </ul>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "pyrat.src.enums.StartingLocation.CENTER", "modulename": "pyrat.src.enums", "qualname": "StartingLocation.CENTER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StartingLocation.CENTER: &#x27;center&#x27;&gt;"}, {"fullname": "pyrat.src.enums.StartingLocation.TOP_LEFT", "modulename": "pyrat.src.enums", "qualname": "StartingLocation.TOP_LEFT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StartingLocation.TOP_LEFT: &#x27;top_left&#x27;&gt;"}, {"fullname": "pyrat.src.enums.StartingLocation.TOP_RIGHT", "modulename": "pyrat.src.enums", "qualname": "StartingLocation.TOP_RIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StartingLocation.TOP_RIGHT: &#x27;top_right&#x27;&gt;"}, {"fullname": "pyrat.src.enums.StartingLocation.BOTTOM_LEFT", "modulename": "pyrat.src.enums", "qualname": "StartingLocation.BOTTOM_LEFT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StartingLocation.BOTTOM_LEFT: &#x27;bottom_left&#x27;&gt;"}, {"fullname": "pyrat.src.enums.StartingLocation.BOTTOM_RIGHT", "modulename": "pyrat.src.enums", "qualname": "StartingLocation.BOTTOM_RIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StartingLocation.BOTTOM_RIGHT: &#x27;bottom_right&#x27;&gt;"}, {"fullname": "pyrat.src.enums.StartingLocation.RANDOM", "modulename": "pyrat.src.enums", "qualname": "StartingLocation.RANDOM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StartingLocation.RANDOM: &#x27;random&#x27;&gt;"}, {"fullname": "pyrat.src.enums.StartingLocation.SAME", "modulename": "pyrat.src.enums", "qualname": "StartingLocation.SAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StartingLocation.SAME: &#x27;same&#x27;&gt;"}, {"fullname": "pyrat.src.enums.PlayerSkin", "modulename": "pyrat.src.enums", "qualname": "PlayerSkin", "kind": "class", "doc": "<p>This enumeration defines all available player skins.\nThe value should correspond to the directory name containing the skin.</p>\n\n<h6 id=\"values\">Values:</h6>\n\n<blockquote>\n  <ul>\n  <li>RAT:    The player is a rat.</li>\n  <li>PYTHON: The player is a python.</li>\n  <li>GHOST:  The player is a ghost from Pacman.</li>\n  <li>MARIO:  The player is Super Mario.</li>\n  </ul>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "pyrat.src.enums.PlayerSkin.RAT", "modulename": "pyrat.src.enums", "qualname": "PlayerSkin.RAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PlayerSkin.RAT: &#x27;rat&#x27;&gt;"}, {"fullname": "pyrat.src.enums.PlayerSkin.PYTHON", "modulename": "pyrat.src.enums", "qualname": "PlayerSkin.PYTHON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PlayerSkin.PYTHON: &#x27;python&#x27;&gt;"}, {"fullname": "pyrat.src.enums.PlayerSkin.GHOST", "modulename": "pyrat.src.enums", "qualname": "PlayerSkin.GHOST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PlayerSkin.GHOST: &#x27;ghost&#x27;&gt;"}, {"fullname": "pyrat.src.enums.PlayerSkin.MARIO", "modulename": "pyrat.src.enums", "qualname": "PlayerSkin.MARIO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PlayerSkin.MARIO: &#x27;mario&#x27;&gt;"}, {"fullname": "pyrat.src.enums.RandomMazeAlgorithm", "modulename": "pyrat.src.enums", "qualname": "RandomMazeAlgorithm", "kind": "class", "doc": "<p>This enumeration defines all the possible algorithms to generate a random maze.</p>\n\n<h6 id=\"values\">Values:</h6>\n\n<blockquote>\n  <ul>\n  <li>HOLES_ON_SIDE: Missing cells tend to be on the sides of the maze.</li>\n  <li>UNIFORM_HOLES: Missing cells are uniformly distributed.</li>\n  <li>BIG_HOLES:     Missing cells tend to be grouped together.</li>\n  </ul>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "pyrat.src.enums.RandomMazeAlgorithm.HOLES_ON_SIDE", "modulename": "pyrat.src.enums", "qualname": "RandomMazeAlgorithm.HOLES_ON_SIDE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RandomMazeAlgorithm.HOLES_ON_SIDE: &#x27;holes_on_side&#x27;&gt;"}, {"fullname": "pyrat.src.enums.RandomMazeAlgorithm.UNIFORM_HOLES", "modulename": "pyrat.src.enums", "qualname": "RandomMazeAlgorithm.UNIFORM_HOLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RandomMazeAlgorithm.UNIFORM_HOLES: &#x27;uniform_holes&#x27;&gt;"}, {"fullname": "pyrat.src.enums.RandomMazeAlgorithm.BIG_HOLES", "modulename": "pyrat.src.enums", "qualname": "RandomMazeAlgorithm.BIG_HOLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RandomMazeAlgorithm.BIG_HOLES: &#x27;big_holes&#x27;&gt;"}, {"fullname": "pyrat.src.utils", "modulename": "pyrat.src.utils", "kind": "module", "doc": "<p>This file is part of the PyRat library.\nIt is meant to be used as a library, and not to be executed directly.</p>\n\n<h6 id=\"please-import-necessary-elements-using-the-following-syntax\">Please import necessary elements using the following syntax:</h6>\n\n<blockquote>\n  <p>from pyrat import <element_name></p>\n</blockquote>\n"}, {"fullname": "pyrat.src.utils.create_workspace", "modulename": "pyrat.src.utils", "qualname": "create_workspace", "kind": "function", "doc": "<p>Creates all the directories for a clean student workspace.\nAlso creates a few default programs to start with.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>target_directory: The directory in which to create the workspace.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.utils.generate_documentation", "modulename": "pyrat.src.utils", "qualname": "generate_documentation", "kind": "function", "doc": "<p>Generates the documentation for the project.\nThe function will parse the PyRat library, and all the subdirectories of the workspace directory.\nThis will create a doc directory in the workspace directory, and fill it with the documentation.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>workspace_directory: The directory in which the workspace is located.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">workspace_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.utils.caller_file", "modulename": "pyrat.src.utils", "qualname": "caller_file", "kind": "function", "doc": "<p>Returns the path to the file from which the caller of this function was called.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>file_path: The path to the file from which the caller of this function was called.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.utils.pyrat_files", "modulename": "pyrat.src.utils", "qualname": "pyrat_files", "kind": "function", "doc": "<p>Returns the list of all the paths to files in the PyRat library.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>file_paths: The list of all the paths to files in the PyRat library.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyrat.src.utils.is_valid_directory", "modulename": "pyrat.src.utils", "qualname": "is_valid_directory", "kind": "function", "doc": "<p>Checks if a directory exists or can be created, without actually creating it.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>directory: The directory to check.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>valid: True if the directory can be created, False otherwise.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "games", "modulename": "games", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "players", "modulename": "players", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "players.Random1", "modulename": "players.Random1", "kind": "module", "doc": "<p>This file contains useful elements to define a particular player.\nIn order to use this player, you need to instanciate it and add it to a game.\nPlease refer to example games to see how to do it properly.</p>\n"}, {"fullname": "players.Random1.Random1", "modulename": "players.Random1", "qualname": "Random1", "kind": "class", "doc": "<p>This player controls a PyRat character by performing random actions.\nMore precisely, at each turn, a random choice among all possible actions is selected.\nNote that this doesn't take into account the structure of the maze.</p>\n", "bases": "pyrat.src.Player.Player"}, {"fullname": "players.Random1.Random1.__init__", "modulename": "players.Random1", "qualname": "Random1.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>args:   Arguments to pass to the parent constructor.</li>\n  <li>kwargs: Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "players.Random1.Random1.turn", "modulename": "players.Random1", "qualname": "Random1.turn", "kind": "function", "doc": "<p>This method redefines the abstract method of the parent class.\nIt is called at each turn of the game.\nIt returns an action to perform among the possible actions, defined in the Action enumeration.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "players.Random1.Random1.find_next_action", "modulename": "players.Random1", "qualname": "Random1.find_next_action", "kind": "function", "doc": "<p>This method returns an action to perform among the possible actions, defined in the Action enumeration.\nHere, the action is chosen randomly.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self: Reference to the current object.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "players.Random2", "modulename": "players.Random2", "kind": "module", "doc": "<p>This file contains useful elements to define a particular player.\nIn order to use this player, you need to instanciate it and add it to a game.\nPlease refer to example games to see how to do it properly.</p>\n"}, {"fullname": "players.Random2.Random2", "modulename": "players.Random2", "qualname": "Random2", "kind": "class", "doc": "<p>This player is an improvement of the Random1 player.\nContrary to that previous version, here we take into account the maze structure.\nMore precisely, we select at each turn a random move among those that don't hit a wall.</p>\n", "bases": "pyrat.src.Player.Player"}, {"fullname": "players.Random2.Random2.__init__", "modulename": "players.Random2", "qualname": "Random2.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>args:   Arguments to pass to the parent constructor.</li>\n  <li>kwargs: Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "players.Random2.Random2.turn", "modulename": "players.Random2", "qualname": "Random2.turn", "kind": "function", "doc": "<p>This method redefines the abstract method of the parent class.\nIt is called at each turn of the game.\nIt returns an action to perform among the possible actions, defined in the Action enumeration.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "players.Random2.Random2.find_next_action", "modulename": "players.Random2", "qualname": "Random2.find_next_action", "kind": "function", "doc": "<p>This method returns an action to perform among the possible actions, defined in the Action enumeration.\nHere, the action is chosen randomly among those that don't hit a wall.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "players.Random3", "modulename": "players.Random3", "kind": "module", "doc": "<p>This file contains useful elements to define a particular player.\nIn order to use this player, you need to instanciate it and add it to a game.\nPlease refer to example games to see how to do it properly.</p>\n"}, {"fullname": "players.Random3.Random3", "modulename": "players.Random3", "qualname": "Random3", "kind": "class", "doc": "<p>This player is an improvement of the Random2 player.\nHere, we add elements that help us explore better the maze.\nMore precisely, we keep a list (in a global variable to be updated at each turn) of cells that have already been visited in the game.\nThen, at each turn, we choose in priority a random move among those that lead us to an unvisited cell.\nIf no such move exists, we move randomly.</p>\n", "bases": "pyrat.src.Player.Player"}, {"fullname": "players.Random3.Random3.__init__", "modulename": "players.Random3", "qualname": "Random3.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>args:   Arguments to pass to the parent constructor.</li>\n  <li>kwargs: Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "players.Random3.Random3.visited_cells", "modulename": "players.Random3", "qualname": "Random3.visited_cells", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "players.Random3.Random3.turn", "modulename": "players.Random3", "qualname": "Random3.turn", "kind": "function", "doc": "<p>This method redefines the abstract method of the parent class.\nIt is called at each turn of the game.\nIt returns an action to perform among the possible actions, defined in the Action enumeration.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "players.Random3.Random3.find_next_action", "modulename": "players.Random3", "qualname": "Random3.find_next_action", "kind": "function", "doc": "<p>This method returns an action to perform among the possible actions, defined in the Action enumeration.\nHere, the action is chosen randomly among those that don't hit a wall, and that lead to an unvisited cell if possible.\nIf no such action exists, we choose randomly among all possible actions that don't hit a wall.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "players.TemplatePlayer", "modulename": "players.TemplatePlayer", "kind": "module", "doc": "<p>This file contains useful elements to define a particular player.\nIn order to use this player, you need to instanciate it and add it to a game.\nPlease refer to example games to see how to do it properly.</p>\n"}, {"fullname": "players.TemplatePlayer.TemplatePlayer", "modulename": "players.TemplatePlayer", "qualname": "TemplatePlayer", "kind": "class", "doc": "<p>This player is basically a player that does nothing except printing the phase of the game.\nIt is meant to be used as a template to create new players.\nMethods \"preprocessing\" and \"postprocessing\" are optional.\nMethod \"turn\" is mandatory.</p>\n", "bases": "pyrat.src.Player.Player"}, {"fullname": "players.TemplatePlayer.TemplatePlayer.__init__", "modulename": "players.TemplatePlayer", "qualname": "TemplatePlayer.__init__", "kind": "function", "doc": "<p>This function is the constructor of the class.\nWhen an object is instantiated, this method is called to initialize the object.\nThis is where you should define the attributes of the object and set their initial values.\nArguments <em>args and *</em>kwargs are used to pass arguments to the parent constructor.\nThis is useful not to declare again all the parent's attributes in the child class.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:   Reference to the current object.</li>\n  <li>args:   Arguments to pass to the parent constructor.</li>\n  <li>kwargs: Keyword arguments to pass to the parent constructor.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>A new instance of the class.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "players.TemplatePlayer.TemplatePlayer.preprocessing", "modulename": "players.TemplatePlayer", "qualname": "TemplatePlayer.preprocessing", "kind": "function", "doc": "<p>This method redefines the method of the parent class.\nIt is called once at the beginning of the game.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "players.TemplatePlayer.TemplatePlayer.turn", "modulename": "players.TemplatePlayer", "qualname": "TemplatePlayer.turn", "kind": "function", "doc": "<p>This method redefines the abstract method of the parent class.\nIt is called at each turn of the game.\nIt returns an action to perform among the possible actions, defined in the Action enumeration.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>action: One of the possible actions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "players.TemplatePlayer.TemplatePlayer.postprocessing", "modulename": "players.TemplatePlayer", "qualname": "TemplatePlayer.postprocessing", "kind": "function", "doc": "<p>This method redefines the method of the parent class.\nIt is called once at the end of the game.</p>\n\n<h6 id=\"in\">In:</h6>\n\n<blockquote>\n  <ul>\n  <li>self:       Reference to the current object.</li>\n  <li>maze:       An object representing the maze in which the player plays.</li>\n  <li>game_state: An object representing the state of the game.</li>\n  <li>stats:      Statistics about the game.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"out\">Out:</h6>\n\n<blockquote>\n  <ul>\n  <li>None.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Self</span>,</span><span class=\"param\">\t<span class=\"n\">maze</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">Maze</span><span class=\"o\">.</span><span class=\"n\">Maze</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">pyrat</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">stats</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();